#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Layout-Based Spatial Briefing System

This module provides a 3D spatial information briefing system that:
1. Takes layout information generated by inference.py (e.g., scene0002_00.txt)
2. Feeds this layout back to SpatialLM Llama
3. Generates a comprehensive briefing about the spatial information

Usage:
    python layout_based_briefing.py -l scene0002_00.txt -o briefing_output.txt -m manycore-research/SpatialLM-Llama-1B
"""

import os
import sys
import locale
import argparse
import torch
import numpy as np
from tqdm import tqdm
from threading import Thread
from transformers import AutoTokenizer, AutoModelForCausalLM
from transformers import TextIteratorStreamer

# 시스템 기본 인코딩 확인 및 설정
print(f"Current locale: {locale.getdefaultlocale()}")
print(f"Current file system encoding: {sys.getfilesystemencoding()}")
print(f"Current default encoding: {sys.getdefaultencoding()}")

# 환경 변수 설정 (한글 처리)
os.environ["PYTHONIOENCODING"] = "utf-8"

from spatiallm import Layout
from spatiallm.layout.entity import Wall, Door, Window, Bbox

def load_layout_from_file(layout_file):
    """
    Load a layout from a file generated by inference.py
    
    Args:
        layout_file (str): Path to the layout file
        
    Returns:
        layout (Layout): The layout object
    """
    try:
        with open(layout_file, 'r', encoding='utf-8') as f:
            layout_str = f.read()
        
        # Create Layout object from the layout string
        layout = Layout(layout_str)
        return layout
    except Exception as e:
        print(f"Error loading layout from file: {str(e)}")
        raise

def analyze_layout(layout):
    """
    Analyze a layout to extract key information
    
    Args:
        layout (Layout): The layout object
        
    Returns:
        dict: Dictionary containing analysis results
    """
    # Get layout string
    layout_str = layout.to_language_string()
    layout_lines = layout_str.strip().split('\n')
    
    # Categorize entities by parsing the layout string
    walls = []
    doors = []
    windows = []
    objects = []
    
    for line in layout_lines:
        if line.startswith('wall_') or 'Wall(' in line:
            walls.append(line)
        elif line.startswith('door_') or 'Door(' in line:
            doors.append(line)
        elif line.startswith('window_') or 'Window(' in line:
            windows.append(line)
        elif line.startswith('bbox_') or 'Bbox(' in line:
            objects.append(line)
    
    # Count object types
    object_types = {}
    for obj in objects:
        try:
            if "=" in obj and "(" in obj:
                # Format like: bbox_0=Bbox(sofa,-3.5064208984375,0.9839955329895016,...)
                obj_type = obj.split('(')[1].split(',')[0]
            else:
                # Other format
                parts = obj.split(',')
                obj_type = parts[0]
                
            if obj_type in object_types:
                object_types[obj_type] += 1
            else:
                object_types[obj_type] = 1
        except Exception as e:
            print(f"Failed to parse object: {obj}, error: {e}")
            continue
    
    # Calculate approximate room dimensions
    x_coords = []
    y_coords = []
    heights = []
    
    for wall in walls:
        try:
            # Try to extract coordinates based on the format
            if "Wall(" in wall:
                # Format: wall_0=Wall(-3.15,-4.01,0.02,-0.95,-4.01,0.02,2.72,0.0)
                coords = wall.split('(')[1].split(')')[0].split(',')
                x_coords.extend([float(coords[0]), float(coords[3])])
                y_coords.extend([float(coords[1]), float(coords[4])])
                if len(coords) > 6:
                    heights.append(float(coords[6]))
        except Exception as e:
            print(f"Failed to parse wall coordinates: {wall}, error: {e}")
            continue
    
    # Calculate dimensions if we have coordinates
    if x_coords and y_coords:
        width = max(x_coords) - min(x_coords)
        length = max(y_coords) - min(y_coords)
        height = max(heights) if heights else 2.4  # Default height if not available
        area = width * length
        volume = area * height
    else:
        width = length = height = area = volume = 0
    
    # Infer room type
    room_type = "Unknown"
    if object_types:
        if any(obj_type in ['bed', 'pillow', 'nightstand'] for obj_type in object_types):
            room_type = "Bedroom"
        elif any(obj_type in ['sofa', 'tv', 'coffee_table', 'couch'] for obj_type in object_types):
            room_type = "Living Room"
        elif any(obj_type in ['dining_table', 'chair', 'dining_table_combination'] for obj_type in object_types):
            room_type = "Dining Room"
        elif any(obj_type in ['toilet', 'sink', 'bathtub', 'shower'] for obj_type in object_types):
            room_type = "Bathroom"
        elif any(obj_type in ['stove', 'refrigerator', 'oven', 'microwave'] for obj_type in object_types):
            room_type = "Kitchen"
    
    return {
        "wall_count": len(walls),
        "door_count": len(doors),
        "window_count": len(windows),
        "object_count": len(objects),
        "object_types": object_types,
        "width": width,
        "length": length,
        "height": height,
        "area": area,
        "volume": volume,
        "room_type": room_type
    }

def generate_briefing_from_layout(model, layout, tokenizer, detail_level="high", style="standard", language="english"):
    """
    Generate a comprehensive briefing using SpatialLM based on layout information
    
    Args:
        model: The SpatialLM model
        layout (Layout): The layout object
        tokenizer: The tokenizer for the model
        detail_level (str): The level of detail for the briefing
        style (str): The style of the briefing (standard or tactical)
        language (str): The language for the briefing (english or korean)
        
    Returns:
        str: The generated briefing text
    """
    # Convert layout back to text representation
    layout_str = layout.to_language_string()
    
    # Analyze the layout
    analysis = analyze_layout(layout)
    
    # Language instruction
    lang_instruction = ""
    if language == "korean":
        lang_instruction = "\n\nIMPORTANT: Your response must be ENTIRELY IN KOREAN. Do not use any English in your response, translate all headings, terms, and content to Korean."
    
    # Create a prompt based on the selected style
    if style == "standard":
        prompt = f"""I'm going to provide you with a detailed 3D spatial layout of a scene. This layout contains information about walls, doors, windows, and various objects in the space.

The layout information is as follows:
{layout_str}

Based on this 3D spatial information, please provide a comprehensive briefing that includes:

1. ENVIRONMENT OVERVIEW
   - Space identification (room type, purpose)
   - Approximate dimensions (width, length, height, area)
   - Overall layout structure

2. STRUCTURAL ELEMENTS
   - Detailed analysis of walls (count, arrangement, dimensions)
   - Access points (doors, windows, their positions and dimensions)
   - Architectural features

3. OBJECT INVENTORY
   - Complete catalog of all objects in the space
   - Their positions, dimensions, and relationships 
   - Functional zones identified by object groupings

4. SPATIAL RELATIONSHIPS
   - How different areas of the space connect and relate
   - Movement flow and circulation patterns
   - Key focal points and important spatial features

5. PRACTICAL ASSESSMENT
   - Functionality evaluation of the space
   - Ergonomics and usability considerations
   - Recommendations for optimal use of the space

Please provide precise measurements where possible, and organize the information in a clear, structured format that would be most useful for someone who needs to understand this space without having seen it.{lang_instruction}
"""
    elif style == "tactical":
        prompt = f"""I'm going to provide you with a detailed 3D spatial layout of a scene. This layout contains information about walls, doors, windows, and various objects in the space.

The layout information is as follows:
{layout_str}

As a military tactical operations specialist with extensive combat experience, provide an ADVANCED TACTICAL COMBAT BRIEFING about this environment with MAXIMUM OPERATIONAL VALUE. Analyze the 3D data with extreme precision and provide detailed information that would be critical for high-risk military operations, special forces deployment, and counterterrorism scenarios. Include these specific sections:

1. EXECUTIVE SUMMARY
   - Critical information synthesis (30-second briefing for immediate action)
   - Highest-priority tactical considerations ranked by operational impact
   - Immediate threats, vulnerabilities, and tactical advantages quantified
   - Strategic importance assessment and mission impact analysis

2. ENVIRONMENT CLASSIFICATION & COMPREHENSIVE SECURITY ASSESSMENT
   - Precise identification of the space type with detailed strategic significance
   - Structural integrity assessment with material composition analysis and exact stress points
   - Advanced defensibility rating system (scale 1-10 with sub-metrics for specific threats)
   - Key terrain features and tactical implications with dominance analysis
   - Potential ambush locations, booby trap/IED placement points with precise coordinates
   - Environmental risk factors (structural collapse points, fire propagation paths)
   - Complete perimeter vulnerability mapping with threat prioritization

3. ACCESS POINT MULTI-DOMAIN ANALYSIS
   - Complete inventory of ALL entry/exit points with exact dimensions and breach calculations
   - Entry breach difficulty ratings (1-10) with material resistance metrics and specific breach tactics
   - Priority ranking of access points with multi-factor threat assessment
   - Complete vulnerability assessment matrix for each access point
   - Advanced fields of fire analysis from/towards each access point (degrees of coverage, effective ranges)
   - Counter-sniper considerations for external-facing openings
   - Recommended security positions with interlocking fields of fire
   - Acoustic properties of entry points (sound transmission factors)

4. TACTICAL MOVEMENT & MANEUVER COMPREHENSIVE ANALYSIS
   - Primary, alternate, contingency, and emergency movement routes with timing metrics
   - Precise choke points and fatal funnels identification with tactical mitigation strategies
   - Time-distance calculations for ALL critical movements in seconds
   - Complete dead space and blind spot mapping with coordinate references
   - Line-of-sight analysis from all critical positions with geometric calculations
   - Sound propagation considerations with detection probability metrics
   - Room clearing sequence recommendations with specific team configurations
   - Movement tempo analysis (recommended speed variations based on spatial constraints)
   - Kinetic and non-kinetic entry options with success probability

5. COVER & CONCEALMENT COMPREHENSIVE ASSESSMENT
   - Detailed object-by-object evaluation for ballistic protection (penetration resistance by caliber)
   - Material-specific ballistic rating (level I-IV protection equivalency)
   - Complete concealment options with detection probability from various angles
   - Assessment of cover from multiple weapon types (small arms, explosives, fragmentation)
   - Cover density mapping with tactical positioning recommendations
   - Overlapping fields of fire analysis from each cover position (360° assessment)
   - Cover longevity assessment (sustainability under sustained fire)
   - Object stability analysis (secondary hazards from destruction)
   - Cover positioning relative to all access points with risk metrics

6. ADVANCED THREAT ASSESSMENT & TACTICAL FORCE POSITIONING
   - Optimal defensive positions with geometric fields of fire analysis
   - Counter-positions for each potential enemy position
   - Most likely AND most dangerous enemy courses of action with probability assessment
   - Detailed force distribution with exact positioning coordinates and team compositions
   - Weapons employment recommendations by position with maximum effective ranges
   - Tactical advantage/disadvantage points with numerical rating
   - Maximum supportable force size with diminishing returns analysis
   - Overwatch position recommendations with specific mission roles
   - Weapon-specific positioning recommendations (crew-served weapons, designated marksmen)

7. COMMAND, CONTROL, COMMUNICATIONS & INTELLIGENCE (C3I)
   - Command post locations with primary/alternate recommendations and security requirements
   - Communication challenges with frequency and method recommendations
   - Visual and auditory signal effectiveness assessment
   - Recommended communication methods with redundancy planning
   - Control measures and tactical boundaries with exact coordinate designations
   - Intelligence collection point recommendations (observation posts, sensor placements)
   - Electronic warfare considerations (signal propagation analysis)
   - Information flow optimization recommendations

8. COMPREHENSIVE CONTINGENCY PLANNING
   - Medical evacuation routes with timing metrics and casualty collection points
   - Rally points and emergency extraction with exact coordinates and cover assessment
   - Fallback positions and defensive layering with progressive security recommendations
   - Response plans to specific enemy actions with decision matrix
   - Environmental hazards with specific mitigation strategies
   - Breached structure integrity assessment (post-explosion tactical considerations)
   - Counter-assault planning with force preservation focus
   - Civilian presence considerations and non-combatant evacuation options

9. EQUIPMENT-SPECIFIC RECOMMENDATIONS & SPECIALIZED TACTICS
   - Mission-specific equipment requirements with prioritization
   - Advanced breaching recommendations with exact placement points
   - Specialized sensing equipment requirements (thermal, acoustic, chemical)
   - Force composition recommendations with specific skill requirements
   - Tactical patience points with risk/reward assessment
   - Objective prioritization with detailed reasoning
   - Risk mitigation measures with effectiveness projections
   - Specialized tactics recommendations based on unique environmental features
   - Night/limited visibility tactical adjustments

Format your analysis as a highly structured, meticulously detailed tactical briefing with precise measurements, coordinates, angles, and actionable intelligence. The briefing must be suitable for direct operational planning in high-stakes military and counterterrorism operations. Use exact measurements, percentages, numerical ratings, and probability assessments wherever possible.{lang_instruction}
"""
    else:
        # Default to standard if an unknown style is provided
        return generate_briefing_from_layout(model, layout, tokenizer, detail_level, "standard", language)
    
    # Add more detailed request based on detail level
    if detail_level == "high":
        if style == "tactical":
            prompt += """

CRITICAL: This briefing requires ABSOLUTE MAXIMUM PRECISION, DETAIL AND TACTICAL VALUE:
- Include ALL critical measurements with millimeter precision and tactical significance
- Provide exact distances between ALL key tactical points with engagement implications
- Specify complete fields of fire in exact degrees with optimal weapon positioning
- Calculate precise timing for ALL possible movement patterns between positions (seconds)
- Assess ballistic protection values of ALL materials with caliber-specific penetration data
- Rate defensive positions using comprehensive numerical scale (1-10) with multiple sub-factors
- Include specific recommendations for optimal weapon types and ammunition by position
- Detail exact personnel numbers, positioning, and skill requirements per position
- Provide precise breach point coordinates with material-specific breaching techniques
- Calculate maximum effective ranges for different weapon systems with accuracy probability
- Evaluate ALL structural weak points with specific demolition/reinforcement recommendations
- Assess acoustic properties with sound propagation modeling for covert operations
- Evaluate thermal signature considerations with counter-detection recommendations
- Specify lighting conditions with night vision/thermal implications and shadow analysis
- Include counter-sniper tactics for all exposed positions
- Provide timing-based assault synchronization recommendations
- Detail exact fields of fire with degree measurements from each position
- Include tactical breathing space analysis (areas to regroup/reorganize)
- Provide specific communications recommendations based on structural interference patterns
- Detail optimal sensor placement for maximum situational awareness
- Include specific tactical decision points with decision criteria
"""
        else:
            prompt += """

Please provide the HIGHEST LEVEL OF DETAIL possible:
- Include ALL measurable dimensions with precision
- Provide comprehensive analysis of every object in the space
- Analyze the spatial relationships in multiple dimensions
- Evaluate all functional aspects of the environment
- Consider both practical and aesthetic elements
- Make specific recommendations based on the spatial analysis
"""
    
    # Format the conversation based on model requirements
    if hasattr(model.config, 'model_type') and model.config.model_type.startswith('SpatialLMLlama'):
        conversation = [{"role": "user", "content": prompt}]
    else:
        # Default format for other models
        conversation = [
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": "user", "content": prompt},
        ]
    
    # Apply tokenizer
    try:
        input_ids = tokenizer.apply_chat_template(
            conversation, add_generation_prompt=True, return_tensors="pt"
        )
    except Exception as e:
        print(f"Falling back to basic tokenization due to: {str(e)}")
        input_ids = tokenizer(prompt, return_tensors="pt").input_ids
    
    input_ids = input_ids.to(model.device)
    
    # Set up streamer for text generation
    streamer = TextIteratorStreamer(
        tokenizer, timeout=60.0, skip_prompt=True, skip_special_tokens=True
    )
    
    # Generate text
    generate_kwargs = dict(
        input_ids=input_ids,
        attention_mask=torch.ones_like(input_ids),
        streamer=streamer,
        max_new_tokens=4096,
        do_sample=True,
        temperature=0.7,
        top_p=0.92,
        top_k=40,
        use_cache=True,
    )
    
    # Run generation in a separate thread
    t = Thread(target=model.generate, kwargs=generate_kwargs)
    t.start()
    
    print(f"Generating {style} spatial briefing in {language} based on layout information...\n")
    generated_texts = []
    for text in streamer:
        generated_texts.append(text)
        print(text, end="", flush=True)
    print("\nBriefing complete!")
    
    briefing_text = "".join(generated_texts)
    
    # If the model just returns layout information, process it into a better format
    if (briefing_text.startswith("wall_") or 
        briefing_text.startswith("bbox_") or 
        briefing_text.startswith("window_") or 
        "wall_" in briefing_text[:100]):
        print("\nDetected raw layout information. Converting to a structured briefing...")
        
        # Generate a structured briefing based on the analysis results and requested style
        if style == "tactical":
            briefing_text = generate_tactical_fallback_briefing(analysis, language)
        else:
            # Standard briefing
            briefing_text = generate_standard_fallback_briefing(analysis, language)
    
    return briefing_text

def generate_standard_fallback_briefing(analysis, language="english"):
    """Generate standard briefing if the model fails to generate proper text"""
    if language == "korean":
        briefing_text = f"""# 공간 환경 브리핑

## 1. 환경 개요
- **공간 유형**: {analysis['room_type']}
- **치수**: {analysis['width']:.2f}m × {analysis['length']:.2f}m × {analysis['height']:.2f}m
- **총 면적**: {analysis['area']:.2f} 제곱미터
- **체적**: {analysis['volume']:.2f} 입방미터

## 2. 구조적 요소
- **벽**: {analysis['wall_count']}개의 벽이 이 공간의 경계를 형성
- **접근점**: {analysis['door_count']}개의 문과 {analysis['window_count']}개의 창문
- **레이아웃 유형**: {'개방형' if analysis['door_count'] > 2 else '구획형'} 레이아웃

## 3. 물품 목록
"""
        # Add object inventory
        for obj_type, count in analysis['object_types'].items():
            briefing_text += f"- **{obj_type.replace('_', ' ').title()}**: {count}개\n"
        
        # Add more sections based on the analysis
        briefing_text += f"""
## 4. 공간 관계
- 이 공간은 {len(analysis['object_types'])}가지 유형의 물체로 구성되어 있음
- 물체 배치에 따라 주요 기능 구역 식별 가능
- {'다수의' if analysis['door_count'] > 1 else '제한된'} 접근점이 {'원활한' if analysis['door_count'] > 1 else '제한된'} 동선 흐름을 시사

## 5. 실용적 평가
- 이 공간은 주로 {analysis['room_type'].lower()} 용도로 기능함
- 물체 배치는 {'효율적인' if analysis['area'] > 15 else '조밀한'} 공간 활용을 시사함
- {'창문이 자연 채광과 환기를 제공함' if analysis['window_count'] > 0 else '자연 채광이 제한적임'}
"""
    else:
        briefing_text = f"""# Spatial Environment Briefing

## 1. Environment Overview
- **Space Type**: {analysis['room_type']}
- **Dimensions**: {analysis['width']:.2f}m × {analysis['length']:.2f}m × {analysis['height']:.2f}m
- **Total Area**: {analysis['area']:.2f} square meters
- **Volume**: {analysis['volume']:.2f} cubic meters

## 2. Structural Elements
- **Walls**: {analysis['wall_count']} walls form the boundary of this space
- **Access Points**: {analysis['door_count']} doors and {analysis['window_count']} windows
- **Layout Type**: {'Open plan' if analysis['door_count'] > 2 else 'Compartmentalized'} layout

## 3. Object Inventory
"""
        # Add object inventory
        for obj_type, count in analysis['object_types'].items():
            briefing_text += f"- **{obj_type.replace('_', ' ').title()}**: {count}\n"
        
        # Add more sections based on the analysis
        briefing_text += f"""
## 4. Spatial Relationships
- The space is organized with {len(analysis['object_types'])} types of objects
- Major functional zones can be identified based on object clustering
- {'Multiple' if analysis['door_count'] > 1 else 'Limited'} access points suggest {'good' if analysis['door_count'] > 1 else 'restricted'} circulation flow

## 5. Practical Assessment
- This space functions primarily as a {analysis['room_type'].lower()}
- The arrangement of objects suggests a {'efficient' if analysis['area'] > 15 else 'compact'} use of space
- {'Windows provide natural lighting and ventilation' if analysis['window_count'] > 0 else 'Limited natural lighting due to few windows'}
"""
    return briefing_text

def generate_tactical_fallback_briefing(analysis, language="english"):
    """Generate tactical briefing if the model fails to generate proper text"""
    # Calculate defensibility score based on walls, doors, windows
    defensibility = min(8, 5 + (analysis['wall_count'] // 4) - (analysis['window_count'] // 2))
    
    # Calculate various tactical metrics
    coverage_score = min(9, len(analysis['object_types']) + 2)
    vulnerability_score = min(10, (analysis['door_count'] + analysis['window_count']) * 2)
    
    # Determine material strength (estimation)
    material_strength = "Medium (standard construction materials)"
    material_strength_kr = "중간 (표준 건축 자재)"
    
    # Calculate optimal team size
    min_team_size = max(4, 2 + analysis['door_count'] + (analysis['window_count'] // 2))
    max_team_size = min(12, min_team_size + 4 + (analysis['area'] // 15))
    
    if language == "korean":
        briefing_text = f"""# 고급 전술 작전 브리핑

## 요약
- **공간 분류**: {analysis['room_type']} 환경, 면적 {analysis['area']:.1f}m²
- **중요 고려사항**: {'다수의' if analysis['door_count'] + analysis['window_count'] > 3 else '제한된'} 접근점, {'높은' if analysis['object_count'] > 10 else '중간'} 물체 밀도
- **전술 평가**: 방어력 {defensibility}/10, 보안성 {10-vulnerability_score}/10, 엄폐물 가용성 {coverage_score}/10

## 1. 환경 분류 및 보안 평가
- **공간 유형**: {analysis['room_type']}
- **치수**: {analysis['width']:.2f}m × {analysis['length']:.2f}m × {analysis['height']:.2f}m
- **총 면적**: {analysis['area']:.2f}m² / 가용 바닥 면적: ~{max(10, analysis['area'] - analysis['object_count'] * 1.2):.2f}m²
- **체적**: {analysis['volume']:.2f}m³ (가스/연기 확산 관련)
- **방어력 평가**: {defensibility}/10
- **자재 평가**: {material_strength_kr}
- **주요 취약점**: {'다수의 접근점 모니터링이 필요함' if analysis['door_count'] + analysis['window_count'] > 3 else '탈출 경로가 제한됨'}
- **잠재적 IED 위치**: 출입구, 가구 아래, 천장 부착물

## 2. 접근점 상세 분석
- **주요 진입점**: {analysis['door_count']}개의 문이 보안 통제 필요
- **대체 접근점**: {analysis['window_count']}개의 창문 {'(중대한 취약점)' if analysis['window_count'] > 0 else ''}
- **침투 난이도**: {'중간 - 표준 문 침투 기술 적용 가능' if analysis['door_count'] > 0 else '높음 - 벽 침투가 필요할 수 있음'}
- **사격장 우려 사항**: {'다수의 창문이 교차 사격 취약점 발생' if analysis['window_count'] > 1 else '외부 사격 위치 제한됨'}
- **권장 진입점**: {'2차 문(노출 적음)' if analysis['door_count'] > 1 else '주 출입구(적절한 침투 기술 필요)'}
- **진입점 보안**: 각 접근점에 최소 2인 1조의 보안 요원 필요

## 3. 전술 이동 및 기동 분석
- **주요 이동 경로**: {'구역 간 다수의 경로' if analysis['area'] > 25 else '제한된 이동 경로'}
- **위험 통로**: 모든 출입구 및 가구 사이의 좁은 통로
- **병목 지점**: 출입구(폭: ~0.9m), {'가구 클러스터 사이의 경로' if analysis['object_count'] > 5 else '제한된 내부 장애물'}
- **시간-거리 요소**: 방 가로지르기: ~{max(2, analysis['width'] // 1.5):.1f}초, 문과 문 사이: ~{max(3, analysis['length'] // 1.2):.1f}초
- **사각지대 평가**: {'상당한' if analysis['object_count'] > 8 else '중간 수준의'} 가구 뒤 사각지대 존재
- **방 소탕 우선순위**: 진입점에서 시계 방향으로, 먼저 모서리 확보
- **소음 규율**: {'문제적 - 나무 바닥/다수 물체' if analysis['object_count'] > 8 else '적절한 이동 기술로 관리 가능'}

## 4. 엄폐 및 은폐 평가
"""
        # Add tactical relevance for different objects in Korean
        tactical_value = {
            'sofa': ('중간', '양호', '권총 구경에만 레벨 II-IIIA 수준 방탄'),
            'bed': ('중간', '양호', '권총 구경에만 레벨 II 수준 방탄'),
            'table': ('낮음', '중간', '최소한의 방탄 성능, 은폐만 가능'),
            'cabinet': ('높음', '우수', '레벨 III 수준으로 소총 탄에 우수한 방어'),
            'desk': ('중간', '양호', '레벨 II 수준으로 권총 탄에 효과적'),
            'chair': ('매우 낮음', '취약', '방탄 성능 없음, 최소한의 은폐만 가능'),
            'bookcase': ('높음', '우수', '책으로 채워진 경우 레벨 III 수준'),
            'wardrobe': ('높음', '우수', '레벨 III 수준, 우수한 방어 제공')
        }
        
        for obj_type, count in analysis['object_types'].items():
            cover_value = '낮음'
            concealment = '제한적'
            protection = '최소한의 방탄 성능, 은폐만 가능'
            
            for key, value in tactical_value.items():
                if key in obj_type.lower():
                    cover_value, concealment, protection = value
                    break
                    
            briefing_text += f"- **{obj_type.replace('_', ' ').title()}** ({count}개): 엄폐 가치 {cover_value}, 은폐 {concealment}, {protection}\n"
        
        # Add remaining sections in Korean
        briefing_text += f"""
## 5. 위협 평가 및 병력 배치
- **최적 방어 위치**: {'주 진입구 맞은편 모서리 위치' if analysis['area'] > 20 else '단단한 벽에 등을 기댄 위치'}
- **사격 범위**: {'360° 커버를 위해 최소 4명의 인원 필요' if analysis['area'] > 30 else '270° 커버는 3명의 인원으로 가능'}
- **가장 가능성 높은 적 접근로**: 주 출입구와 {'창문' if analysis['window_count'] > 0 else '보조 출입구'}을 통함
- **병력 배치 권장사항**: 
  * 진입팀: {min(4, analysis['door_count'] * 2)}명
  * 보안팀: {min(4, analysis['window_count'] * 2 + 2)}명
  * 지휘팀: 2명
  * 지원/예비팀: {min(2, max_team_size - min_team_size)}명
- **무기 운용**: {'제한된 공간으로 인해' if analysis['area'] < 30 else '실내 환경으로 인해'} 단총 권장
- **최대 유효 사거리**: {max(3, analysis['width']):.1f}m - 직관 사격 위주

## 6. 지휘, 통제 및 통신
- **권장 CP 위치**: {'창문에서 떨어진 2차 출구 근처' if analysis['door_count'] > 1 and analysis['window_count'] > 0 else '보안 인원과 함께 주 출입구 근처'}
- **통신 문제**: {'건물 자재가 무전 효과를 제한할 수 있음' if analysis['wall_count'] > 8 else '표준 무전 통신이 효과적일 것임'}
- **이중 통신**: 시각적 수신호 필수, 이어피스 무전기 주 수단
- **통제 조치**: 번호가 매겨진 출입구/창문, 가구를 기준점으로 활용
- **부대 경계**: {'사분면별 팀 할당' if analysis['area'] > 35 else '기능별(진입, 보안) 팀 할당'}

## 7. 우발상황 계획
- **부상자 후송 경로**: {'2차 출구 권장' if analysis['door_count'] > 1 else '주 출입구만 가능'}
- **집결지**: {'외부, 주 출입구에서 15m 거리의 엄폐 위치' if analysis['window_count'] > 0 else '가능한 경우 인접 공간'}
- **후퇴 위치**: {'후면 벽을 따라 다수의 옵션' if analysis['area'] > 25 else '제한된 옵션 - 퇴각이 필요할 수 있음'}
- **환경적 위험**: {'가구, 커튼에 의한 화재 위험' if 'curtain' in str(analysis['object_types']) else '표준 구조적 위험요소'}
- **비상 탈출**: {'다수의 출구 지점 가용' if analysis['door_count'] > 1 else '단일 출구 지점 - 고위험'}

## 8. 작전 권장사항
- **병력 구성**: {min_team_size}-{max_team_size}명의 작전 요원 권장
- **장비 요구사항**: 
  * 침투 도구: {'표준 문 침투 키트' if analysis['door_count'] > 0 else '벽 침투 능력이 필요할 수 있음'}
  * {'초기 진입 시 방탄 방패 권장' if analysis['door_count'] > 0 else '표준 진입 장비'}
  * {'섬광탄이 효과적일 수 있음' if analysis['area'] > 20 else '제한된 공간에서 섬광 장치 사용 주의'}
  * 청력 보호 장비 필수
- **특별 고려사항**: 
  * {'높은 물체 밀도로 인해 신중한 이동 필요' if analysis['object_count'] > 10 else '중간 수준의 장애물 밀도'}
  * {'다수의 접근점으로 인해 추가 보안 필요' if analysis['door_count'] + analysis['window_count'] > 3 else '제한된 접근으로 보안 단순화'}
  * {'넓은 면적으로 인해 추가 인원 필요' if analysis['area'] > 40 else '표준 팀으로 관리 가능한 면적'}
"""
    else:
        briefing_text = f"""# ADVANCED TACTICAL COMBAT BRIEFING

## EXECUTIVE SUMMARY
- **Space Classification**: {analysis['room_type']} environment, {analysis['area']:.1f}m² area
- **Critical Concerns**: {'Multiple' if analysis['door_count'] + analysis['window_count'] > 3 else 'Limited'} access points, {'high' if analysis['object_count'] > 10 else 'moderate'} object density
- **Tactical Rating**: {defensibility}/10 defensibility, {10-vulnerability_score}/10 security, {coverage_score}/10 cover availability

## 1. ENVIRONMENT CLASSIFICATION & SECURITY ASSESSMENT
- **Space Type**: {analysis['room_type']}
- **Dimensions**: {analysis['width']:.2f}m × {analysis['length']:.2f}m × {analysis['height']:.2f}m
- **Total Area**: {analysis['area']:.2f}m² / Clear Floor Space: ~{max(10, analysis['area'] - analysis['object_count'] * 1.2):.2f}m²
- **Volume**: {analysis['volume']:.2f}m³ (relevant for gas/smoke dispersion)
- **Defensibility Rating**: {defensibility}/10
- **Material Assessment**: {material_strength}
- **Critical Vulnerabilities**: {'Multiple access points require monitoring' if analysis['door_count'] + analysis['window_count'] > 3 else 'Limited escape routes'}
- **Potential IED Locations**: Doorways, under furniture, ceiling fixtures

## 2. ACCESS POINT DETAILED ANALYSIS
- **Primary Entry Points**: {analysis['door_count']} doors requiring security control
- **Alternative Access**: {analysis['window_count']} windows {'(significant vulnerability)' if analysis['window_count'] > 0 else ''}
- **Breach Difficulty**: {'Moderate - standard door breaching techniques apply' if analysis['door_count'] > 0 else 'High - wall breach may be required'}
- **Field of Fire Concerns**: {'Multiple windows create cross-fire vulnerability' if analysis['window_count'] > 1 else 'Limited external fire positions'}
- **Recommended Entry Point**: {'Secondary door (less exposed)' if analysis['door_count'] > 1 else 'Primary door with proper breach technique'}
- **Entry Point Security**: Each access point requires minimum 2-person security element

## 3. TACTICAL MOVEMENT & MANEUVER ANALYSIS
- **Primary Movement Corridors**: {'Multiple pathways between zones' if analysis['area'] > 25 else 'Restricted movement with limited pathways'}
- **Fatal Funnels**: All doorways and narrow passages between furniture
- **Choke Points**: Doorways (width: ~0.9m), {'pathways between furniture clusters' if analysis['object_count'] > 5 else 'limited internal obstacles'}
- **Time-Distance Factors**: Cross-room movement: ~{max(2, analysis['width'] // 1.5):.1f} seconds, Door-to-door: ~{max(3, analysis['length'] // 1.2):.1f} seconds
- **Dead Space Assessment**: {'Significant' if analysis['object_count'] > 8 else 'Moderate'} dead space behind furniture
- **Room Clearing Priority**: Clock-wise from entry, secure corners first
- **Noise Discipline**: {'Problematic - wooden floors/multiple objects' if analysis['object_count'] > 8 else 'Manageable with proper movement technique'}

## 4. COVER & CONCEALMENT ASSESSMENT
"""
        # Add tactical relevance for different objects
        tactical_value = {
            'sofa': ('Medium', 'Good', 'Level II-IIIA equivalent against pistol calibers only'),
            'bed': ('Medium', 'Good', 'Level II equivalent against pistol calibers only'),
            'table': ('Low', 'Medium', 'Minimal ballistic protection, concealment only'),
            'cabinet': ('High', 'Excellent', 'Level III equivalent, solid protection against rifle rounds'),
            'desk': ('Medium', 'Good', 'Level II equivalent, effective against pistol rounds'),
            'chair': ('Very Low', 'Poor', 'No ballistic protection, minimal concealment'),
            'bookcase': ('High', 'Excellent', 'Level III equivalent if filled with books'),
            'wardrobe': ('High', 'Excellent', 'Level III equivalent, excellent protection')
        }
        
        for obj_type, count in analysis['object_types'].items():
            cover_value = 'Low'
            concealment = 'Limited'
            protection = 'Minimal ballistic protection, concealment only'
            
            for key, value in tactical_value.items():
                if key in obj_type.lower():
                    cover_value, concealment, protection = value
                    break
                    
            briefing_text += f"- **{obj_type.replace('_', ' ').title()}** ({count}): {cover_value} cover value, {concealment} concealment, {protection}\n"
        
        # Add remaining sections
        briefing_text += f"""
## 5. THREAT ASSESSMENT & FORCE POSITIONING
- **Optimal Defensive Positions**: {'Corner positions opposite main entry' if analysis['area'] > 20 else 'Positions with back to solid wall'}
- **Fields of Fire**: {'360° coverage requires minimum 4 personnel' if analysis['area'] > 30 else '270° coverage possible with 3 personnel'}
- **Most Likely Enemy Approach**: Through primary door and {'windows' if analysis['window_count'] > 0 else 'secondary entrances'}
- **Force Distribution Recommendation**: 
  * Entry team: {min(4, analysis['door_count'] * 2)} personnel
  * Security element: {min(4, analysis['window_count'] * 2 + 2)} personnel
  * Command element: 2 personnel
  * Support/Reserve: {min(2, max_team_size - min_team_size)} personnel
- **Weapons Employment**: Short-barreled weapons recommended due to {'confined space' if analysis['area'] < 30 else 'interior environment'}
- **Maximum Effective Range**: {max(3, analysis['width']):.1f}m - point shooting dominates

## 6. COMMAND, CONTROL & COMMUNICATIONS
- **Recommended CP Location**: {'Near secondary exit, away from windows' if analysis['door_count'] > 1 and analysis['window_count'] > 0 else 'Near primary entrance with security'}
- **Communication Challenges**: {'Building materials may limit radio effectiveness' if analysis['wall_count'] > 8 else 'Standard radio communications should be effective'}
- **Redundant Comms**: Visual hand signals required, radio with earpiece primary
- **Control Measures**: Numbered doors/windows, furniture as reference points
- **Unit Boundaries**: {'Team assignments by quadrant' if analysis['area'] > 35 else 'Team assignments by function (entry, security)'}

## 7. CONTINGENCY PLANNING
- **CASEVAC Route**: {'Secondary exit recommended' if analysis['door_count'] > 1 else 'Primary entrance only'}
- **Rally Point**: {'External, 15m from primary entrance, covered position' if analysis['window_count'] > 0 else 'Adjacent room if available'}
- **Fallback Position**: {'Multiple options along back wall' if analysis['area'] > 25 else 'Limited options - exit may be required'}
- **Environmental Hazards**: {'Risk of fire (furniture, curtains)' if 'curtain' in str(analysis['object_types']) else 'Standard structural hazards'}
- **Emergency Extraction**: {'Multiple exit points available' if analysis['door_count'] > 1 else 'Single exit point - high risk'}

## 8. OPERATIONAL RECOMMENDATIONS
- **Force Composition**: {min_team_size}-{max_team_size} operators recommended
- **Equipment Requirements**: 
  * Breaching tools: {'Standard door breaching kit' if analysis['door_count'] > 0 else 'Wall breach capability may be needed'}
  * {'Ballistic shields recommended for initial entry' if analysis['door_count'] > 0 else 'Standard entry equipment'}
  * {'Flash-bang devices may be effective' if analysis['area'] > 20 else 'Caution with flash devices in confined space'}
  * Hearing protection essential
- **Special Considerations**: 
  * {'High object density requires careful movement' if analysis['object_count'] > 10 else 'Moderate obstacle density'}
  * {'Multiple access points require additional security' if analysis['door_count'] + analysis['window_count'] > 3 else 'Limited access simplifies security'}
  * {'Large area requires additional personnel' if analysis['area'] > 40 else 'Area manageable with standard team'}
"""
    return briefing_text

def run_layout_briefing_pipeline(layout_file, model_path, output_file, detail_level="high", style="standard", language="english"):
    """
    Run the complete layout-based briefing pipeline
    
    Args:
        layout_file (str): Path to the layout file
        model_path (str): Path to the SpatialLM model
        output_file (str): Path to save the briefing output
        detail_level (str): Level of detail for the briefing
        style (str): Style of briefing to generate
        language (str): Language for the briefing output (english or korean)
    """
    try:
        # 1. Load the layout from file
        print(f"Loading layout from {layout_file}...")
        layout = load_layout_from_file(layout_file)
        
        # 2. Load the model
        print(f"Loading SpatialLM model from {model_path}...")
        tokenizer = AutoTokenizer.from_pretrained(model_path)
        model = AutoModelForCausalLM.from_pretrained(model_path)
        
        # Set model to GPU if available
        device = "cuda" if torch.cuda.is_available() else "cpu"
        if device == "cpu":
            print("Warning: CUDA not available, using CPU. This may be very slow.")
        
        model.to(device)
        
        # Check if model has the specific method for SpatialLM models
        if hasattr(model, 'set_point_backbone_dtype'):
            model.set_point_backbone_dtype(torch.float32)
        
        model.eval()
        
        # 3. Generate the briefing
        briefing = generate_briefing_from_layout(model, layout, tokenizer, detail_level, style, language)
        
        # 4. Save the briefing
        with open(output_file, "w", encoding="utf-8") as f:
            f.write(briefing)
        
        print(f"\nSpatial briefing saved to {output_file}")
        return briefing
        
    except Exception as e:
        print(f"Error during briefing generation: {str(e)}")
        import traceback
        traceback.print_exc()
        raise

if __name__ == "__main__":
    parser = argparse.ArgumentParser("Layout-Based Spatial Briefing Generator")
    parser.add_argument(
        "-l",
        "--layout",
        type=str,
        required=True,
        help="Path to the layout file generated by inference.py"
    )
    parser.add_argument(
        "-o",
        "--output",
        type=str,
        default="layout_based_briefing.txt",
        help="Path to save the briefing output"
    )
    parser.add_argument(
        "-m",
        "--model_path",
        type=str,
        default="manycore-research/SpatialLM-Llama-1B",
        help="Path to the SpatialLM model checkpoint"
    )
    parser.add_argument(
        "-d",
        "--detail",
        type=str,
        choices=["standard", "high"],
        default="high",
        help="Level of detail in the briefing"
    )
    parser.add_argument(
        "-s",
        "--style",
        type=str,
        choices=["standard", "tactical"],
        default="tactical",
        help="Style of the briefing to generate"
    )
    parser.add_argument(
        "-g",
        "--language",
        type=str,
        choices=["english", "korean"],
        default="korean",
        help="Language for the briefing output"
    )
    args = parser.parse_args()
    
    try:
        # Run the briefing pipeline
        run_layout_briefing_pipeline(
            args.layout, args.model_path, args.output, args.detail, args.style, args.language
        )
        
    except Exception as e:
        print(f"Error: {str(e)}")
        import traceback
        traceback.print_exc()
        exit(1) 